#!/usr/bin/env ruby

require 'fileutils'
require 'find'
require 'optparse'
require 'ostruct'

$: << File.join(File.dirname(__FILE__), 'lib')

require 'threadpool'

MEAP_VERSION = "2.0"
CLASS_PATH   = Dir.glob(File.join(File.dirname(__FILE__), "jar/meap-#{MEAP_VERSION}/*.jar"))
SEGMENTER    = "com.meapsoft.Segmenter"
EXTRACTOR    = "com.meapsoft.FeatExtractor"

MEAP_FILE_REGEXP  = /\.(feat|seg)_(beats|events)$/
SOUND_FILE_REGEXP = /\.(aif*|mp3|wav)$/i

FEATURES = %w(
AvgChroma
AvgChromaScalar
AvgChunkPower
AvgFreqSimple
AvgMelSpec
AvgMFCC
AvgPitch
AvgSpec
AvgSpecCentroid
AvgSpecFlatness
AvgTonalCentroid
ChunkLength
ChunkStartTime
Entropy
RMSAmplitude
SpectralStability
)

META_FEATURES = %w(
Likelihood
MedianBeatLengthOffset
)

EXTRACTED_FEATURES = FEATURES

class MeapOptionParser
  def initialize
    @options = OpenStruct.new
    @options.features = []
    @options.cache = true
    @options.clean = false
    @options.jobs  = 1
    @opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{File.basename($0)} [options] FILE_OR_DIRECTORY..."

      opts.separator ""
      opts.separator "Segmenter options:"

      opts.on("-t", "--tempo-scale [N]", Float, "tempo scale") do |arg|
        @options.tempo_scale = arg
      end

      opts.on("-s", "--smoothing-window [N]", Float, "smoothing window") do |arg|
        @options.smoothing_window = arg
      end

      # opts.on("-d", "--[no-]old-onset-detector") do |arg|
      #   @options.old_onset_detector = arg
      # end

      # opts.on("-0", "--[no-]initial-onset") do |arg|
      #   @options.initial_onset = arg
      # end

      opts.separator ""
      opts.separator "Extractor options:"

      opts.on("-w", "--fft-size [SIZE]", Integer, "FFT size") do |arg|
        @options.fft_size = arg
      end

      opts.on("-H", "--fft-hop [HOP]", Integer, "FFT hop") do |arg|
        @options.fft_hop = arg
      end

      # List of arguments.
      # opts.on(
      #   "-f f1,f2,f3", "--features f1,f2,f3", Array,
      #   *["Valid features:", FEATURES, " ", "Default features:", DEFAULT_FEATURES].flatten) do |arg|
      #   @options.features = arg.sort
      # end

      opts.separator ""
      opts.separator "Other options:"

      opts.on("-c", "--[no-]clean") do |arg|
        @options.clean = arg
      end

      opts.on("-C", "--[no-]cache") do |arg|
        @options.cache = arg
      end

      opts.on("-j", "--jobs [N]", Integer, "Allow N jobs at once") do |arg|
        @options.jobs = [1, arg].max
      end
      
      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        self.help!
      end
    end
  end
  
  def help
    puts @opts
  end
  
  def help!
    self.help
    exit(0)
  end
  
  def parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    @opts.parse!(args)
    @options
  end
end

class Cache
  def initialize(file, values)
    @file = file
    @values = values
  end
  def valid?(i)
    @values[i] == @cache[i]
  end
  def do
    begin
      @cache = File.readlines(@file).collect { |x| x.strip }
    rescue
      @cache = Array.new(@values.size)
    end
    yield self
    File.open(@file, "w") { |io|
      io.write(@values.join("\n"))
    }
  end
end

def mk_file(path, ext)
  # path + ".com.meapsoft." + ext
  path + "." + ext
end

def java(klass, args)
  system("java", "-mx1000m", "-cp", CLASS_PATH.join(":"), klass, *args)
end

def opt(flag, value)
  if value === true
    [flag]
  elsif value === false
    []
  else
    value.nil? ? [] : [flag, value.to_s]
  end
end

def process_file(type, options, input_file)
  segment_file  = mk_file(input_file, "seg_" + type.to_s)
  feat_file     = mk_file(input_file, "feat_" + type.to_s)
  cache_file    = mk_file(input_file, "cache")

  segmenter_options = [
    type == :events ? ["-d"] : [],
    opt("-t", options.tempo_scale),
    opt("-s", options.smoothing_window),
    "-0" ].flatten

  extractor_options = [
    opt("-w", options.fft_size),
    opt("-h", options.fft_hop),
    EXTRACTED_FEATURES.collect { |f| ["-f", f] } ].flatten

  # Cache.new(
  #   cache_file,
  #   [segmenter_options, extractor_options].collect { |x| ":" + x.join(":") + ":" }
  # ).do { |cache|
  
  segment_file_changed = false
  
  unless (options.cache && File.exists?(segment_file))
    puts "Running segmenter on #{input_file}..."
    unless java(SEGMENTER, segmenter_options + ["-o", segment_file, input_file])
      raise "segmenter failed"
    end
    segment_file_changed = true
  end

  unless (options.cache && !segment_file_changed && File.exists?(feat_file))
    puts "Running extractor on #{input_file}..."
    unless java(EXTRACTOR, extractor_options + ["-o", feat_file, segment_file])
      raise "extractor failed"
    end
  end
  # }
end

def process_files(options, input_path)
  if File.directory?(input_path)
    pool = ThreadPool.new(options.jobs)
    Find.find(input_path) do |file|
      if File.file?(file) && SOUND_FILE_REGEXP =~ file
        pool.process {
          begin
            process_file(:beats, options, file)
          rescue
            puts $!
            puts $!.backtrace
          end
        }
      end
    end
    pool.join()
  else
    process_file(options, input_path)
  end
end

def clean(input_path)
  if File.directory?(input_path)
    Find.find(input_path) do |file|
      if File.file?(file) && MEAP_FILE_REGEXP =~ file
        FileUtils.rm(file)
        puts "Removed #{file}"
      end
    end
  end
end

option_parser = MeapOptionParser.new
options = option_parser.parse(ARGV)
if ARGV.size < 1
  option_parser.help!
end

ARGV.each { |input_path|
  if options.clean then
    clean(input_path)
  else
    process_files(options, input_path)
  end
}

# EOF