#!/usr/bin/env ruby

require 'fileutils'

class Package
	attr_reader :name, :flags
	def initialize(name, flags=[])
		@name = name
		@flags = flags
	end
	def install
		opts = flags.empty? ? "" : "--flags=" + flags.join(",")
	  system("cabal install #{opts} #{name}")
	end
end

class Tool < Package
	attr_reader :command
	def initialize(name, command=name, flags=[])
		super(name, flags)
		@command = command
	end
	def install
	  if `which #{command}`.empty?
	    super
	  end
	end
end

class UpstreamSource
  UPSTREAM_DIR = "upstream"
  attr_reader :name, :url
  def initialize(name, url)
    @name = name
    @url = url
  end
  def upstream_dir
    File.join(UPSTREAM_DIR, name)
  end
end

UPSTREAM_SOURCES = [
  # These are all available on hackage now
  # UpstreamSource.new("hosc", "http://www.slavepianos.org/rd/sw/hosc"),
  # UpstreamSource.new("hsc3", "http://www.slavepianos.org/rd/sw/hsc3"),
  # UpstreamSource.new("hsc3-lang", "http://www.slavepianos.org/rd/sw/hsc3-lang"),
  # UpstreamSource.new("hmeap", "http://www.slavepianos.org/rd/sw/hmeap")
]

TOOLS = [Tool.new("alex"), Tool.new("happy"), Tool.new("c2hs")]
PACKAGES = [Package.new("hmatrix", ["vector"])]

system("cabal update")
(TOOLS + PACKAGES).each { |p| p.install }

FileUtils.mkdir_p(UpstreamSource::UPSTREAM_DIR)

UPSTREAM_SOURCES.each { |s|
  if File.directory?(s.upstream_dir)
    system("cd #{s.upstream_dir} && darcs pull -a")
  else
    system("darcs get --partial #{s.url} #{s.upstream_dir}")
  end
  system("cd #{s.upstream_dir} && cabal install")
}
